#!/bin/sh
set -euf

##
# Create a VirtualBox virtual machine for Ubuntu.
#
# Syntax:
#
#     vboxmanage-createvm-ubuntu <nickname>
#
#     vboxmanage-createvm-ubuntu <os type> <iso path> <vm path> <post install command>
#
# Examples of the nickname syntax:
#
#     vboxmanage-createvm debian
#     vboxmanage-createvm ubuntu
#     vboxmanage-createvm oracle
#
# Example extended syntax and Debian Linux:
#
#     vboxmanage-createvm \
#	  Debian12_64 \
#     debian-12.4.0-arm64-DVD-1.iso \
#     debian-12.4.0-arm64
#
# Example extended syntax and Ubuntu Linux:
#
#     vboxmanage-createvm \
#	  Ubuntu_64 \
#     ubuntu-22.04-live-server-amd64.iso \
#     ubuntu-22.04-server-amd64 \
#
# Example extended syntax and Oracle Linux:
#
#     vboxmanage-createvm \
#     Oracle9_64 \
#     OracleLinux-R9-U3-aarch64-dvd.iso \
#     oracle-linux-r9-u3-aarch64
#
# The ISO path can be wherever you have the ISO file.
#
# The VM path is typically within your existing VirtualBox
# virtual machine path, because this program will create the
# disk drive file within that directory.
#
# The OS type must be one of the VirtualBox known OS types.
#
#
# ## Settings
#
# This program uses our preferred settings, and you can
# edit this program to use the settings that you want. 
#
# The purpose of these settings is to do a simple setup
# for new users, akin to a tutorial that is easy to change.
# This program is not attempting to be a full featured
# installation such as with all settings configurable via
# command line options.
#
# This program uses our preferred example configuration:
#
#   * United States English
#
#   * UTC time zone
#
#   * 20 GB drive
#
#   * 4 GB RAM
#
# This program uses our preferred example configurations:
#
#   * Name: User
#
#   * Username: user
#
#   * Password: secret
#
#   * Domain name: example.com
#
#   * Host name: demo.example.com
##

# Include https://github.com/SixArm/unix-shell-script-kit
. "$(dirname "$(readlink -f "$0")")/unix-shell-script-kit"

## Parse nicknames

case "$1" in
   	debian)
		os_type="Debian12_64"
		iso_path="$HOME/iso/debian-12.4.0-arm64-DVD-1.iso"
		vm_path="$HOME/vm/debian-12.4.0-arm64"
		post_install_command="sudo apt-get -y update; sudo apt-get -y upgrade; sudo apt-get -y dist-upgrade"
		fix_debian_bug=true
      	;;
   	oracle)
		os_type="Oracle9_64"
		iso_path="$HOME/iso/OracleLinux-R9-U3-aarch64-dvd.iso"
		vm_path="$HOME/vm/oracle-linux-r9-u3-aarch"
		post_install_command="sudo dnf --assumeyes autoremove; sudo dnf --assumeyes upgrade; sudo dnf --assumeyes autoremovesudo; sudo dnf install -y dnf-automatic; sudo systemctl enable --now dnf-automatic.timer; sudo systemctl enable --now dnf-automatic-install.timer"
      	;;
	ubuntu)
		os_type="Ubuntu_64"
		iso_path="$HOME/iso/ubuntu-20.04-live-server-amd64.iso"
		vm_path="$HOME/vm/ubuntu-20.04-server-amd64"
		post_install_command="sudo apt-get -y update; sudo apt-get -y upgrade; sudo apt-get -y dist-upgrade"
		fix_debian_bug=true
      	;;
   *)
		os_type="$1"
		iso_path="$2"
		vm_path="$3"
	;;
esac

## Input ISO path and VM path

iso=$(basename "$iso_path")
iso_dir=$(dirname "$iso_path")

vm=$(basename "$vm_path")
vm_dir=$(dirname "$vm_path")

## Preflight

[ -f "$iso_path" ] || die "Cannot find ISO file: $iso_path"
[ -d "$vm_dir" ] || die "Cannot find VM directory: $vm_dir"

## Settings

## Configuration - you may want to change these to your preferences

# Disk drive: we prefer the disk drive format VMDK versus VDI
dd="${dd:=$vm.vmdk}"

# Random Access Memory (RAM) in MB
memory="${memory:=4096}"

# Visual Random Access Memory (VRAM) in MB
vram="${vram:=32}"

# Drive disk size in MB
medium_size="${medium_size:=20480}"

# Use encryption: we prefer this off because we want flexibility
use_encryption="${use_encryption:=false}"

# Use auxiliary: this is a work in progress for the Debian bug
use_auxiliary="${use_auxiliary:=false}"

out "os_type: $os_type"
out "iso: $iso"
out "vm: $vm"
out "dd: $dd"
out "memory: $memory"
out "vram: $vram"
out "medium_size: $medium_size"
out "use_encryption: $use_encryption"
out "use_auxiliary: $use_auxiliary"

# Fix Debian bug: this is a work in progress for Ubuntu server
fix_debian_bug=false

# If we're installing the server, then we need to deal with the
# Debian bug, so we need to use an auxiliary directory somewhere.
# We prefer creating the directory alongside the ISO file, because
# we want to easily see the config files that the ISO is creating,
# and we also want to keep the files so we have a record of the work.
# Other developers may prefer to put the auxiliary directory into
# a temporary directory and delete the directory after installation.

if [ "$use_auxiliary" = true ]; then
	auxiliary_base_path="$iso_path.auxiliary/"
	mkdir -p "$auxiliary_base_path"
fi

## Create the VM

VBoxManage createvm \
--name "$vm" \
--ostype "$os_type" \
--register

VBoxManage createmedium \
--filename "$vm_path/$dd" \
--size "$medium_size"

VBoxManage storagectl "$vm" \
--name SATA \
--add SATA \
--controller IntelAhci

VBoxManage storageattach "$vm" \
--storagectl SATA \
--port 0 \
--device 0 \
--type hdd \
--medium "$vm_path/$dd"

VBoxManage storagectl "$vm" \
--name IDE \
--add ide

VBoxManage storageattach "$vm" \
--storagectl IDE \
--port 0 \
--device 0 \
--type dvddrive \
--medium "$iso_path"

VBoxManage modifyvm "$vm" \
--memory "$memory" \
--vram "$vram"

VBoxManage modifyvm "$vm" \
--ioapic on

VBoxManage modifyvm "$vm" \
--boot1 dvd \
--boot2 disk \
--boot3 none \
--boot4 none

# TODO: research how to create nics.
#
# VBoxManage modifyvm "$vm" \
# --nic1 bridged \
# --bridgeadapter1 wlan0 \
# --nic2 nat \

VBoxManage modifyvm "$vm" \
--cpus 2

if [ "$use_encryption" = true ]; then
	password_path="$iso_path.password.txt"
	echo "secret" > "$password_path"
	VBoxManage encryptmedium "$vm_dir/$vm/$dd" \
	--newpassword "$password_path" \
	--cipher "AES-XTS256-PLAIN64" \
	--newpasswordid "demo"
fi

if [ "$use_auxiliary" = true ]; then
	VBoxManage unattended install "$vm" \
	--auxiliary-base-path="$auxiliary_base_path" \
	--iso="$iso_path" \
	--user=user \
	--password=secret \
	--country=US \
	--locale=en_US \
	--time-zone=UTC \
	--hostname=demo.example.com \
	--post-install-command="$post_install_command"
else
	VBoxManage unattended install "$vm" \
	--iso="$iso_path" \
	--user=user \
	--password=secret \
	--country=US \
	--locale=en_US \
	--time-zone=UTC \
	--hostname=demo.example.com \
	--post-install-command="$post_install_command"
fi

# Fix Debian Stretch bug by changing the setup from wrong 
# interactive menu installation to headless installation.
# See https://www.virtualbox.org/ticket/18410
#
# This is needed for Ubuntu server, not for Ubuntu desktop.
#
# TODO: this currently doesn't work -- we welcome advice!

if [ "$fix_debian_bug" = true ]; then
	cp "${auxiliary_base_path}isolinux-txt.cfg" "${auxiliary_base_path}isolinux-txt.cfg.orig"
	auxiliary_patch_file="$HOME/tmp/patch.diff"
	patch "${auxiliary_base_path}isolinux-txt.cfg" < "${auxiliary_patch_file}"
	cp "$HOME/tmp/isolinux-txt.cfg" "${auxiliary_base_path}isolinux-txt.cfg" 
	sed -i.orig 's/^default vesa.*/default live-install/' "${auxiliary_base_path}isolinux-isolinux.cfg"
fi

VBoxManage startvm "$vm"
